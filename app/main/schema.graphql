type Hello {
    message: String!
    other: String!
}

type User {
    id: ID!
    email: String!
    firstName: String!
    lastName: String!
    country: String!
    phoneNumber: String!
    userGroup: String!
    createdAt: String
    updatedAt: String
} 

input UserInput {
    email: String!
    firstName: String!
    lastName: String!
    country: String!
    phoneNumber: String!
    userGroup: String!
}

input UpdateUserInput {
    id: ID!
    email: String
    firstName: String
    lastName: String
    country: String
    phoneNumber: String
    userGroup: String
}

type UserPayload {
  status: Boolean!
  error: String
  userID: ID
}

type UpdateUserPayload {
  status: Boolean!
  error: String
  user: User
}

type DeleteUserPayload {
  status: Boolean!
  error: String
  userID: ID
}

type Event {
    id: ID!
    eventName: String!
    createdByEmail: String!
    eventDateAndTime: String!
    attendees: String!
    createdAt: String
    updatedAt: String
}

input EventInput {
    eventName: String!
    createdByEmail: String!
    eventDateAndTime: String!
    attendees: String!
}

input GroupEventInput {
    eventName: String!
    createdByEmail: String!
    eventDateAndTime: String!
    groupName: String!
}

input UpdateEventInput {
    id: ID!
    eventName: String
    createdByEmail: String
    eventDateAndTime: String
    attendees: String
}

type EventPayload {
  status: Boolean!
  error: String
  eventID: ID
}

type UpdateEventPayload {
  status: Boolean!
  error: String
  event: Event
}

type DeleteEventPayload {
  status: Boolean!
  error: String
  eventID: ID
}

type UserGroup {
    id: ID!
    groupName: String!
    createdAt: String
    updatedAt: String
}

input UserGroupInput {
    groupName: String!
}

input UpdateUserGroupInput {
    id: ID!
    groupName: String
}

type UserGroupPayload {
  status: Boolean!
  error: String
  userGroupID: ID
}

type UpdateUserGroupPayload {
  status: Boolean!
  error: String
  userGroup: UserGroup
}

type DeleteUserGroupPayload {
  status: Boolean!
  error: String
  userGroupID: ID
}

type Query {
    hello: Hello
    allUsers: [User]
    user(id: Int!): User
    allEvents: [Event]
    event(id: Int): Event
    allUserGroups: [UserGroup]
    userGroup(id: Int): UserGroup
}

type Mutation {
    addUser(input: UserInput): UserPayload!
    updateUser(input: UpdateUserInput): UpdateUserPayload!
    deleteUser(id: Int!): DeleteUserPayload!
    addEvent(input: EventInput): EventPayload!
    addGroupEvent(input: GroupEventInput): EventPayload!
    updateEvent(input: UpdateEventInput): UpdateEventPayload!
    deleteEvent(id: Int!): DeleteEventPayload!
    addUserGroup(input: UserGroupInput): UserGroupPayload!
    updateUserGroup(input: UpdateUserGroupInput): UpdateUserGroupPayload!
    deleteUserGroup(id: Int!): DeleteUserGroupPayload!
}